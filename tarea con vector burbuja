#include "stdafx.h"
#include "conio.h"
#include <iostream>
#include "stdlib.h"
#define MAX 1000
using namespace std;
void cargar(int n,double vec[]);
void mostrar(int n,double vec[]);
double suma(int n,double vec[]);
double resta(int n,double vec[]);
double cer(int n,double vec[]);
void burbuja(int n,double vec[]);
void main()
{
	int n,opcion;
	double vec[MAX];
	do{
	   cout<<"menu \t\t"<<endl;
	   cout<<"1. cargar"<<endl;
	   cout<<"2. mostrar"<<endl;
	   cout<<"3. sumatoria"<<endl;
	   cout<<"4. vector burbuja"<<endl;
	   cout<<"0.salir"<<endl;
	   cout<<"opcion:";
	   cin>>opcion;
	   system("cls");
	   switch (opcion)
	   {
	   case 1:
		   do{cout<<"ingrese tamano del vector menor a 1000:.";
		   cin>>n;}
		   while((n<=0)||(n>1000));
		   cargar(n,vec);
		   break;
	   case 2:
		   mostrar(n,vec);
		   break;
	   case 3:
		   cout<<"la sumatoria de numeros positivos es:"<<suma(n,vec)<<endl;
		   cout<<"la sumatoria de numeros negativos es:"<<resta(n,vec)<<endl;
		   cout<<"la sumatoria de numeros cero es:"<<cer(n,vec)<<endl;
		   break;
	   case 4:
		   burbuja(n,vec);
		   break;
	   case 0:
		   cout<<"saliendo del menu";
		   break;
	   default:
		   cout<<"opcion invalida";
		   break;
	   }
	   getch();
	   system("cls");
	   }while(opcion!=0);
	getch();
}

void cargar(int n,double vec[])
{
	for(int i=0;i<n;i++)
	{
	cout<<"vec["<<i<<"]:";
	cin>>vec[i];
	}
}
void mostrar(int n,double vec[])
{
	for(int i=0;i<n;i++)
	{
	cout<<"vec["<<i<<"]"<<vec[i]<<endl;
	}
}
double suma(int n,double vec[])
{
int s=0;
for(int i=0;i<n;i++)
{
	if(vec[i]>0)
	{
	s=s+1;
	}
}
return s;
}
double resta(int n,double vec[])
{
int r=0;
for(int i=0;i<n;i++)
{
	if(vec[i]<0)
	{
	r=r+1;
	}
}
return r;
}
double cer(int n,double vec[])
{
int c=0;
for(int i=0;i<n;i++)
{
	if(vec[i]==0)
	{
	c=c+1;
	}
}
return c;
}
void burbuja(int n,double vec[])
{
	int aux;
	for(int i=0;i<=n-1;i++)
	{
		for(int j=i+1;j<n;j++)
		{
			if(vec[i]>vec[j])
			{
			 aux=vec[i];
			 vec[i]=vec[j];
			 vec[j]=aux;
			}
		}
		cout<<"vec["<<i<<"]:"<<vec[i]<<endl;
    }
	
}
