#include "stdafx.h"
#include "conio.h"
#include "stdio.h"
#include <string>
#include <iostream>
#include <stdlib.h>
#include "ctype.h"
#define USSER "mio"
#define PASS "hola"
using namespace std;
struct ID{
	string usuario;
	string password;
};
struct tipo_registro{
	string nombre;
	int codigo;
	string descripcion;
	string marca;
	string codex;
	int cantidad;
	string lugar;
	int estado;
};
tipo_registro registro;

long int dir_fisica;

struct partituras_Registro{
   int codigo;
   string nombre;
   string autor;
   char estado;
};
   
 partituras_Registro Registro;
long int fisica;

FILE*ptr;
bool validarNumero(string linea);
bool validarNumer(string codex);
void LOGIN();
void instrumento();
void ALTA_DIRECTA();
void CONSULTA_DIRECTA();
void MODIFICACION_DIRECTA();
void BAJA_LOGICA_DIRECTA(); 
void LISTADO_SECUENCIAL(); 
void PALTA_DIRECTA(); 
void PCONSULTA_DIRECTA();
void PMODIFICACION_DIRECTA();
void PBAJA_LOGICA_DIRECTA(); 
void PLISTADO_SECUENCIAL(); 
void menuprincipal();
void menupartituras();


void main()
{
system("color f0");
	string usuario;
	string password;
	int contador = 0;
	bool ingresa = false;
	do{
		system("cls");
		cout<<"LOGIN DE USUARIO:"<<endl;
		cout<<"A CONTINUACION DEBERA INGRESAR EL USUARIO Y PASSWORD:"<<endl;
		cout<<"--------------------------------"<<endl;
		cout<<"--------------------------------"<<endl;
		cout<<"INGRESE EL USUARIO:";
		getline(cin, usuario);
		cout<<"INGRESE EL PASSWORD:";
		getline(cin,password);
		if((usuario==USSER )&& (password==PASS)){
		ingresa= true;
		}else{
			cout<<" EL USUARIO Y PASSWORD SON INVALIDOS:"<<endl;
			cin.get();
			contador++;

		}
	}while(ingresa== false && contador < 3 );

	if(ingresa==false)
	{
		cout<<"usted no pudo ingresar al sistema:"<<endl;
	}else{
	
		cout<<"bienvenido al sistema"<<endl<<usuario<<endl<<"usted ingresara al menu principal:"<<endl;
		menuprincipal();
	}
	
	getch();
}

void menuprincipal()
{
	system("cls");
	system("color f0");
	int opcion;
	do{
	cout<<"\t\t ****MENU*****"<<endl;
	cout<<"******************************************"<<endl;
	cout<<"\t 1.INSTRUMENTO"<<endl;
	cout<<"\t 2.PARTITURAS"<<endl;
	cout<<"\t 3.VOLVER ATRAS"<<endl;
	cout<<"\t 0.salir del programa"<<endl;
	cout<<"\t opcion:";
	cin>>opcion;
	system("cls");
	switch(opcion)
	{
	case 1:
		instrumento();
		break;
	case 2:
		menupartituras();
		break;
	case 3:
		main();
		break;
	case 0:
		cout<<"\t\n saliendo del programa";
		getch();
		exit(0);
		break;
	default:
		cout<<"\t opcion invalida";
		break;
	}
	}while(opcion!=0);
	system("cls");
   getch();
}


void instrumento()
{
	system("cls");
	system("color f0");
	int opcion;
	do{
	cout<<"\t\t INVENTARIO DE INSTRUMENTOS DE ORQUESTA"<<endl;
	cout<<"\t 1.CREAR ARCHIVO"<<endl;
	cout<<"\t 2.ALTAS DIRECTAS"<<endl;
	cout<<"\t 3.CONSULTAS DIRECTAS"<<endl;
	cout<<"\t 4.MODIFICACION DIRECTA"<<endl;
	cout<<"\t 5.BAJAS LOGICAS DIRECTAS"<<endl;
	cout<<"\t 6.LISTADO SECUENCIAL"<<endl;
	cout<<"\t 7.volver atras"<<endl;
	cout<<"\t 0.Salir"<<endl;
	cout<<"\t opcion: ";
	cin>>opcion;
	system("cls");
	switch(opcion)
	{
	case 1:
		ptr=fopen("inventario.dir","wb");
		cout<<"\nEl archivo fue creado \n\n";
		system("pause");
		system("cls");
		break;
	case 2:
		ALTA_DIRECTA();
		system("cls");
		break;
	case 3:
		CONSULTA_DIRECTA();
		system("cls");
		break;
	case 4:
		MODIFICACION_DIRECTA();
		system("cls");
		break;
	case 5:
		BAJA_LOGICA_DIRECTA();
		system("cls");
		break;
	case 6:
        LISTADO_SECUENCIAL();
		system("cls");
		break;
     case 7:
        menuprincipal();
		system("cls");
		break;
	case 0:
		cout<<"\t saliendo del programa";
		getch();
		exit(0);
		break;
	default:
		cout<<"\t opcion invalida";
		system("cls");
		break;
	}
	}while(opcion!=0);
	system("cls");
	getch();
}

void ALTA_DIRECTA()
{
   int codigo;
   string linea;
   string codex;
   bool repite = true;
   bool repiter = true;
cout<<"\n\n\n altas de registros de instrumentos:";
ptr=fopen("inventario.dir","rb+");
if(ptr==NULL)
	ptr=fopen("inventario.dir","wb");

do{
	do{
		cout<<"\n\n\n codigo del instrumento:";
	    cin.ignore();
        getline(cin,linea);
        if (validarNumero(linea))
		{
		 repite = false;
		}
		else
		{
         cout << "No ha ingresado un entero. Intente nuevamente" << endl;
        }
	} while (repite);
	codigo=stoi(linea);
}while(codigo<=0);
dir_fisica=codigo*sizeof(registro);
fseek(ptr,dir_fisica,SEEK_SET);

fread(&registro,sizeof(registro),1,ptr);
if(registro.codigo==codigo)
{
	cout<<"\n\n\n registro duplicado!!! "<<endl;
	fclose(ptr);
	getch();
	return;
}

cout<<"\n\r nombre: ";
cin.ignore();
getline(cin,registro.nombre);

cout<<"\n\r descripcion: ";
cin.ignore();
getline(cin,registro.descripcion);

cout<<"\n\r marca: ";
cin.ignore();
getline(cin, registro.marca);

do{
		cout<<"\n\r cantidad: ";
	    cin.ignore();
       getline(cin,codex);
        if (validarNumer(codex))
		{
		 repiter = false;
		}
		else
		{
         cout << "No ha ingresado un entero. Intente nuevamente" << endl;
        }
	} while (repiter);
	registro.cantidad=stoi(codex);

cout<<"\n\r lugar: ";
cin.ignore();
getline(cin,registro.lugar);

registro.codigo=codigo;
registro.estado=0;
fseek(ptr,dir_fisica,SEEK_SET);
fwrite(&registro,sizeof(registro),1,ptr);
fclose(ptr);

cout<<"\n\n\n producto registrado !!!";
cout<<"\n\r << oprima cualquier boton para continuar>>:";
getch();
return;
}

void CONSULTA_DIRECTA()
{

	int codigo;
	ptr=fopen("inventario.dir","rb");

	if(ptr==NULL)
	{
		cout<<"\n\n\r no existe el archivo !!:";
		cout<<"\n\n\r <<<oprima cualquier tecla para continuar>>>>";
		getch();
		return;
	}

	cout<<"\n\n\n\r codigo del instrumento:";
	cin>> codigo;

	dir_fisica=codigo*sizeof(registro);
	fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
    fread(&registro,sizeof(registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
    if((registro.codigo==codigo) && (registro.estado!=9))
    {
    cout << "\n\r codigo      nombre     Descripcion    marca        Cantidad        lugar       ";
    cout << "\n\r ---------------------------------------------------------------------------------";
    cout<<endl<<"\t "<<registro.codigo<<"\t "<<registro.nombre<<"\t "<<registro.descripcion<<"\t "<<registro.marca<<"\t "<<registro.cantidad<<"\t "<<registro.lugar;
    }
    else
    {
     cout << "\n\n\n\r No existe ese registro !!!";
    }
  fclose(ptr);
  cout << "\n\n\n\n\r <<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}

void MODIFICACION_DIRECTA(void)
{
	int codigo; // Variable local para el numero de producto que desea modificar

  cout << "\n\r MODIFICACION DE REGISTROS DE PRODUCTOS";
  ptr=fopen("inventario.dir","rb+"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de lectura/escritura
  if(ptr==NULL)  // Valida la existencia del archivo
  {
    cout << "\n\n\n\r No existe el archivo !!!";
    cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
    getch();
    return;
  }

  cout << "\n\n\n\r Numero de producto: "; 
  cin >> codigo;

  dir_fisica=codigo*sizeof(registro); // Calculo de la dir. fisica
  fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
  fread(&registro,sizeof(registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  if((registro.codigo==codigo)&&(registro.estado!=9))
  {
    cout << "\n\r codigo      nombre      Descripcion    marca       Cantidad        lugar         ";
    cout << "\n\r -----------------------------------------------------------------------------";
    cout<<endl<<"\t"<<registro.codigo<<"\t"<<registro.nombre<<"\t"<<registro.descripcion<<"\t"<<registro.marca<<"\t"<<registro.cantidad<<"\t"<<registro.lugar;

      cout << "\n\n\n\rAnote los nuevos datos ...";

      cout << "\n\r nombre: "; 
	  cin.ignore();
	  getline(cin,registro.nombre);

      cout<<"\n\r descripcion:";
      cin.ignore();
      getline(cin,registro.descripcion);

      cout<<"\n\r marca:";
      cin.ignore();
      getline(cin, registro.marca);

      cout<<"\n\r cantidad:";
      cin>>registro.cantidad;

      cout<<"\n\r lugar:";
      cin.ignore();
      getline(cin,registro.lugar);
   
      fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
      fwrite(&registro,sizeof(registro),1,ptr);  // Graba el registro con
						   // los nuevos campos
      fclose(ptr);   // Cierra el archivo
      cout << "\n\n\n\rRegistro modificado !!!";
      cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
      getch();
      return;
  }
  else
  {
   cout << "\n\n\n\r No se encuentra ese registro !!!";
  }
  fclose(ptr); // Cierra el archivo
  cout << "\n\n\n\n\r <<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}

void BAJA_LOGICA_DIRECTA(void)
{

	int codigo; // Variable local para el numero de producto que desea eliminar
  char op;

  cout << "\n\r BAJA LOGICA DE REGISTROS DE PRODUCTOS";
  ptr=fopen("inventario.dir","rb+"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de lectura/escritura
  if(ptr==NULL)  // Valida la existencia del archivo
  {
    cout << "\n\n\n\r No existe el archivo !!!";
    cout << "\n\r <<< Oprima cualquier tecla para continuar >>>";
    getch();
    return;
  }

  cout << "\n\n\n\r codigo del instrumento: ";
  cin >>  codigo;

  dir_fisica= codigo*sizeof(registro); // Calculo de la dir. fisica
  fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
  fread(&registro,sizeof(registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  if(registro.codigo==codigo)
  {
       cout << "\n\r codigo      nombre        Descripcion     marca           Cantidad        lugar         ";
    cout << "\n\r -------------------------------------------------------------------------------------";
    cout<<endl<<"\t"<<registro.codigo<<"\t"<<registro.nombre<<"\t"<<registro.descripcion<<"\t"<<registro.marca<<"\t"<<registro.cantidad<<"\t"<<registro.lugar;
      // registro que desea modificar, ya que al leer un registro, el
      // apuntador se posiciona en el registro siguiente
      // La funcion ftell(alias) devuelve la posicion donde se encuentra el
      // apuntador
      do
      {
	cout << "\n\r Esta seguro que desea eliminar este registro? [S/N] ---> ";
	op=toupper(getche());
      }while(op!='S' && op!='N');
      if(op=='S')
      {
		  registro.estado=9;
	fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
	fwrite(&registro,sizeof(registro),1,ptr);  // Graba el registro con
						   // los nuevos campos
	cout << "\n\n\n\r Registro eliminado logicamente !!!";
      }
      else
      {
	    cout << "\n\n\n\r Registro NO eliminado !!!";
      }
      fclose(ptr);   // Cierra el archivo
      cout << "\n\r <<< Oprima cualquier tecla para continuar >>>";
      getch();
      return;
  }
  else
  {
   cout << "\n\n\n\r No se encuentra ese registro !!!";
  }
  fclose(ptr); // Cierra el archivo
  cout << "\n\n\n\n\r <<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}
void LISTADO_SECUENCIAL()
{

	cout << "\n\r LISTADO DE REGISTROS DE PRODUCTOS";
  ptr=fopen("inventario.dir","rb"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de solo lectura
  if(ptr==NULL)
  {
    cout << "\n\n\n\r No existe el archivo !!!";
    cout << "\n\r <<< Oprima cualquier tecla para continuar >>>";
    getch();
    return;
  }

  cout << "\n\r codigo      nombre        Descripcion      marca           Cantidad        lugar         ";
    cout << "\n\r -------------------------------------------------------------------------------";


  fread(&registro,sizeof(registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  while(!feof(ptr)) // Ciclo mientras no se encuentre el final del archivo
  {
	  if((registro.estado==0) && (registro.codigo!=0))
       cout<<endl<<"\t"<<registro.codigo<<"\t"<<registro.nombre<<"\t"<<registro.descripcion<<"\t"<<registro.marca<<"\t"<<registro.cantidad<<"\t"<<registro.lugar;
    fread(&registro,sizeof(registro),1,ptr);
  }
  fclose(ptr); // Cierra el archivo
  cout << "\n\r ------------------------------------------------------------------------";
  cout << "\n\r Fin del listado !!!";
  cout << "\n\r <<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}


void menupartituras()
{
	system("cls");
	
	int opcion;
	
	do{
	cout<<"\t\t PARTIDURAS"<<endl;
	cout<<"\t 1.Crear archivo"<<endl;
	cout<<"\t 2.Alta directa"<<endl;
	cout<<"\t 3.consulta directa"<<endl;
	cout<<"\t 4.modificacion directa"<<endl;
	cout<<"\t 5.baja logica directa"<<endl;
	cout<<"\t 6.listado secuencial"<<endl;
	cout<<"\t 7.volver a menu"<<endl;
	cout<<"\t 0.Salir"<<endl;
	cout<<"\t opcion:";
	cin>>opcion;
	system("cls");
	switch(opcion)
	{
	case 1:
		ptr=fopen("partituras.dir","wb");
		cout<<"\n --EL ARCHIVO FUE CREADO--"<<endl;
		system("pause");
		system("cls");
		break;
	case 2:
		 PALTA_DIRECTA(); 
		 system("cls");
		 break;
	case 3:
		PCONSULTA_DIRECTA();
		system("cls");
		break;
	case 4:
	    PMODIFICACION_DIRECTA();
		system("cls");
		break;
	case 5:
		PBAJA_LOGICA_DIRECTA(); 
		system("cls");
		break;
	case 6:
		PLISTADO_SECUENCIAL();
		system("cls");
		break;
	case 7:
		system("cls");
		menuprincipal();
		break;
	case 0:
		cout<<"\t saliendo del programa";
		system("cls");
		getch();
		 exit(0);
		break;
	default:
		cout<<"\t opcion invalida"<<endl;
		break;
	}
	}while(opcion!=0);
	system("cls");
	getch();

}


void PALTA_DIRECTA()
{
	string linea;
	bool repite= true;
	int codigo;  // Variable local para el numero de producto
    cout << "\n\r ALTAS DE REGISTROS DE PRODUCTOS";
    ptr=fopen("partituras.dir","rb+"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de lectura/escritura
    if(ptr==NULL)
    ptr=fopen("partituras.dir","wb"); // Crea el archivo en caso de no existir

  do{
	  do{
		cout<<"\n\n\n codigo del instrumento:";
	    cin.ignore();
        getline(cin,linea);
        if (validarNumero(linea))
		{
		 repite = false;
		}
		else
		{
         cout << "No ha ingresado un entero. Intente nuevamente" << endl;
        }
	} while (repite);
	codigo=stoi(linea);
   
    }while(codigo<=0);

  dir_fisica=codigo*sizeof(Registro); // Calculo de la dir. fisica
  fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
  fread(&Registro,sizeof(Registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  if(Registro.codigo==codigo)
  {
       cout << "\n\n\n\rRegistro duplicado !!!";
       fclose(ptr);
       getch();
       return;
  }

  cout << "\n\r nombre: "; 
  cin.ignore();
  getline(cin,Registro.nombre);

  cout << "\n\r autor : ";
  cin.ignore();
  getline(cin,Registro.autor);

  Registro.codigo=codigo;
  Registro.estado=0;
  fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
  fwrite(&Registro,sizeof(Registro),1,ptr); // Grabar el Registro completo
  fclose(ptr); // Cierra el archivo

  cout << "\n\n\n\r Producto registrado !!!";
  cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}

void PCONSULTA_DIRECTA()
{

	int codigo; // Variable local para el numero de producto que desea consultar

  cout << "\n\r CONSULTA DE REGISTROS DE PRODUCTOS";
  ptr=fopen("partituras.dir","rb"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de solo lectura
  if(ptr==NULL)
  {
    cout << "\n\n\n\r No existe el archivo !!!";
    cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
    getch();
    return;
  }

  cout << "\n\n\n ingrese el codigo: "; 
  cin >> codigo;

  dir_fisica=codigo*sizeof(Registro); // Calculo de la dir. fisica
  fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
  fread(&Registro,sizeof(Registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  if((Registro.codigo==codigo) && (Registro.estado!=9))
  {
    cout << "\n\r codigo             nombre           autor"<<endl;
    cout << "\n\r------------------------------------------------------"<<endl;
    cout<<"\t"<<Registro.codigo<<"\t"<<Registro.nombre<<"\t"<<Registro.autor;
  }
  else
  {
    cout << "\n\n\n\r No existe ese registro !!!";
  }
  fclose(ptr);
  cout << "\n\n\n\n\r <<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}

void PMODIFICACION_DIRECTA()
{
	int codigo; // Variable local para el numero de producto que desea modificar

  cout << "\n\r MODIFICACION DE REGISTROS DE PRODUCTOS";
  ptr=fopen("partituras.dir","rb+"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de lectura/escritura
  if(ptr==NULL)  // Valida la existencia del archivo
  {
    cout << "\n\n\n\r No existe el archivo !!!";
    cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
    getch();
    return;
  }

  cout << "\n\n\n\r ingrese el codigo: "; 
  cin >> codigo;

  dir_fisica=codigo*sizeof(Registro); // Calculo de la dir. fisica
  fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
  fread(&Registro,sizeof(Registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  if((Registro.codigo==codigo)&&(Registro.estado!=9))
  {
     cout << "\n\r codigo             nombre           autor"<<endl;
    cout << "\n\r--------------------------------------------------"<<endl;
    cout<<endl<<"\t"<<Registro.codigo<<"\t"<<Registro.nombre<<"\t"<<Registro.autor;

      cout << "\n\n\n\r Anote los nuevos datos ...";

 cout << "\n\r nombre: "; 
  cin.ignore();
  getline(cin,Registro.nombre);

  cout << "\n\r autor   : ";
  cin.ignore();
  getline(cin,Registro.autor);
      // Es necesario reposicionar el apuntador del archivo al principio del
      // registro que desea modificar, ya que al leer un registro, el
      // apuntador se posiciona en el registro siguiente
      // La funcion ftell(alias) devuelve la posicion donde se encuentra el
      // apuntador
      fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
      fwrite(&Registro,sizeof(Registro),1,ptr);  // Graba el registro con
						   // los nuevos campos
      fclose(ptr);   // Cierra el archivo
      cout << "\n\n\n\r Registro modificado !!!";
      cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
      getch();
      return;
  }
  else
  {
   cout << "\n\n\n\r No se encuentra ese registro !!!";
  }
  fclose(ptr); // Cierra el archivo
  cout << "\n\n\n\n\r<<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}

void PBAJA_LOGICA_DIRECTA()
{
	int codigo; // Variable local para el numero de producto que desea eliminar
  char op;

  cout << "\n\r BAJA LOGICA DE REGISTROS DE PRODUCTOS";
  ptr=fopen("partituras.dir","rb+"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de lectura/escritura
  if(ptr==NULL)  // Valida la existencia del archivo
  {
    cout << "\n\n\n\r No existe el archivo !!!";
    cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
    getch();
    return;
  }

  cout << "\n\n\n\r ingrese el codigo: ";
  cin >> codigo;

  dir_fisica=codigo*sizeof(Registro); // Calculo de la dir. fisica
  fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
  fread(&Registro,sizeof(Registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  if(Registro.codigo==codigo)
  {
       cout << "\n\r codigo             nombre           autor";
    cout << "\n\r------------------------------------------------------";
    cout<<"\t"<<Registro.codigo<<"\t"<<Registro.nombre<<"\t"<<Registro.autor;
      // registro que desea modificar, ya que al leer un registro, el
      // apuntador se posiciona en el registro siguiente
      // La funcion ftell(alias) devuelve la posicion donde se encuentra el
      // apuntador
      do
      {
	cout << "\n\rEsta seguro que desea eliminar este registro? [S/N] ---> ";
	op=toupper(getche());
      }while(op!='S' && op!='N');
      if(op=='S')
      {
		  Registro.estado=9;
	fseek(ptr,dir_fisica,SEEK_SET); //Posicionar el apuntador del archivo
	fwrite(&Registro,sizeof(Registro),1,ptr);  // Graba el registro con
						   // los nuevos campos
	cout << "\n\n\n\r Registro eliminado logicamente !!!";
      }
      else
      {
	    cout << "\n\n\n\r Registro NO eliminado !!!";
      }
      fclose(ptr);   // Cierra el archivo
      cout << "\n\r<<< Oprima cualquier tecla para continuar >>>";
      getch();
      return;
  }
  else
  {
   cout << "\n\n\n\r No se encuentra ese registro !!!";
  }
  fclose(ptr); // Cierra el archivo
  cout << "\n\n\n\n\r<<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}
void PLISTADO_SECUENCIAL()
{
	cout << "\n\r LISTADO DE REGISTROS DE PRODUCTOS";
  ptr=fopen("partituras.dir","rb"); // Intenta abrir el archivo PRODUCTO.DIR
				     // en modo de solo lectura
  if(ptr==NULL)
  {
    cout << "\n\n\n\r No existe el archivo !!!";
    cout << "\n\r <<< Oprima cualquier tecla para continuar >>>";
    getch();
    return;
  }
  cout << "\n\r codigo      nombre           autor"<<endl;
    cout << "\n\r----------------------------------"<<endl;
  fread(&Registro,sizeof(Registro),1,ptr);
     // Lee el "Registro", de tamano=sizeof(Registro) del archivo "alias"
  while(!feof(ptr)) // Ciclo mientras no se encuentre el final del archivo
  {
	  if((Registro.estado==0) && (Registro.codigo!=0))
       cout<<endl<<"\t"<<Registro.codigo<<"\t"<<Registro.nombre<<"\t"<<Registro.autor;
    fread(&Registro,sizeof(Registro),1,ptr);
  }
  fclose(ptr); // Cierra el archivo
  cout << "\n\r------------------------------------------------------------------------";
  cout << "\n\r Fin del listado !!!";
  cout << "\n\r <<< Oprima cualquier tecla para continuar >>>";
  getch();
  return;
}
bool validarNumero(string linea)
{
bool b = true;

   int longitud=linea.length();

 
   if (longitud == 0)
   { // Cuando el usuario pulsa ENTER
      b = false;
   } 
   else 
	  if (longitud == 0 && !isdigit(linea[0])) {
      b = false;
   } else {
      int i;
      if (linea[0] == '+' || linea[0] == '-')
         i = 1;
      else
         i = 0;
 
      while (i < longitud) {
         if (!isdigit(linea[i])) {
            b = false;
            break;
         }
         i++;
      }
   }
 
   return b;
}
bool validarNumer(string codex)
{
bool b = true;

   int longitud=codex.length();

 
   if (longitud == 0)
   { // Cuando el usuario pulsa ENTER
      b = false;
   } 
   else 
	  if (longitud == 0 && !isdigit(codex[0])) {
      b = false;
   } else {
      int i;
      if (codex[0] == '+' || codex[0] == '-')
         i = 1;
      else
         i = 0;
 
      while (i < longitud) {
         if (!isdigit(codex[i])) {
            b = false;
            break;
         }
         i++;
      }
   }
 
   return b;
}
